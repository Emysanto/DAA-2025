#include <iostream>
#include <vector>
#include <climits>

using namespace std;

const int INF = INT_MAX;
int N;
vector<vector<int>> dist;
vector<vector<int>> dp;

// Solves TSP using Dynamic Programming + Bitmasking
int tsp(int mask, int pos) {
    if (mask == (1 << N) - 1)  // All cities visited, return to start
        return dist[pos][0];

    if (dp[mask][pos] != -1)
        return dp[mask][pos];

    int ans = INF;

    // Try visiting each unvisited city
    for (int city = 0; city < N; city++) {
        if ((mask & (1 << city)) == 0) { // If city not visited
            int newAns = dist[pos][city] + tsp(mask | (1 << city), city);
            ans = min(ans, newAns);
        }
    }

    return dp[mask][pos] = ans;
}

int main() {
    cout << "Enter number of cities: ";
    cin >> N;

    dist.assign(N, vector<int>(N));
    dp.assign(1 << N, vector<int>(N, -1));

    cout << "Enter distance matrix:\n";
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            cin >> dist[i][j];

    int minCost = tsp(1, 0);  // Start from city 0
    cout << "Minimum travel cost: " << minCost << endl;

    return 0;
}
