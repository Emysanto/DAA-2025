#include <iostream>
#include <vector>

using namespace std;

void printSolutions(const vector<vector<string>>& solutions) {
    if (solutions.empty()) {
        cout << "No solution exists." << endl;
        return;
    }
    
    int count = 1;
    for (const auto& board : solutions) {
        cout << "Solution " << count++ << ":\n";
        for (const string& row : board) {
            cout << row << endl;
        }
        cout << endl;
    }
}

void solveNQueensHelper(int row, int n, vector<string>& board, vector<int>& col, 
                        vector<int>& diag1, vector<int>& diag2, vector<vector<string>>& solutions) {
    if (row == n) {
        solutions.push_back(board);
        return;
    }
    
    for (int c = 0; c < n; c++) {
        if (col[c] || diag1[row - c + n - 1] || diag2[row + c]) continue;
        
        board[row][c] = 'Q';
        col[c] = diag1[row - c + n - 1] = diag2[row + c] = 1;
        
        solveNQueensHelper(row + 1, n, board, col, diag1, diag2, solutions);
        
        board[row][c] = '.';
        col[c] = diag1[row - c + n - 1] = diag2[row + c] = 0;
    }
}

void nQueens(int n) {
    vector<vector<string>> solutions;
    vector<string> board(n, string(n, '.'));
    vector<int> col(n, 0), diag1(2 * n, 0), diag2(2 * n, 0);

    solveNQueensHelper(0, n, board, col, diag1, diag2, solutions);
    printSolutions(solutions);
}

int main() {
    int n;
    cout << "Enter the number of queens: ";
    cin >> n;
    nQueens(n);
    return 0;
}
